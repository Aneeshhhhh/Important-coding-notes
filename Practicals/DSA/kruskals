#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Edge {
    int u, v, weight;
    Edge(int a, int b, int w) : u(a), v(b), weight(w) {}
};

bool compare(Edge a, Edge b) { return a.weight < b.weight; }

int find(int x, vector<int> &parent) {
    if (parent[x] != x) parent[x] = find(parent[x], parent);
    return parent[x];
}

void unite(int x, int y, vector<int> &parent, vector<int> &rank) {
    int rootX = find(x, parent), rootY = find(y, parent);
    if (rank[rootX] < rank[rootY]) parent[rootX] = rootY;
    else if (rank[rootX] > rank[rootY]) parent[rootY] = rootX;
    else parent[rootY] = rootX, rank[rootX]++;
}

int main() {
    int V = 5;
    vector<Edge> edges = {
        Edge(0, 1, 2), Edge(0, 2, 4), Edge(1, 2, 1),
        Edge(1, 3, 7), Edge(2, 4, 3), Edge(3, 4, 5)
    };

    sort(edges.begin(), edges.end(), compare);
    vector<int> parent(V), rank(V, 0);
    for (int i = 0; i < V; i++) parent[i] = i;

    for (Edge &e : edges) {
        if (find(e.u, parent) != find(e.v, parent)) {
            unite(e.u, e.v, parent, rank);
            cout << e.u << " - " << e.v << " : " << e.weight << endl;
        }
    }
    return 0;
}
