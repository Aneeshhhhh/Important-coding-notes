#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
using namespace std;

struct Edge {
    int u, v, weight;
    Edge(int a, int b, int w) : u(a), v(b), weight(w) {}
};

class Graph {
    int V;
    vector<Edge> edges;
    vector<vector<int>> adjMatrix;

public:
    Graph(int vertices) : V(vertices) {
        adjMatrix.resize(V, vector<int>(V, INT_MAX));
    }

    void addEdge(int u, int v, int weight) {
        adjMatrix[u][v] = weight;
        adjMatrix[v][u] = weight;
        edges.push_back(Edge(u, v, weight));
    }

    void displayAdjMatrix() {
        for (int i = 0; i < V; ++i) {
            for (int j = 0; j < V; ++j) {
                if (adjMatrix[i][j] == INT_MAX)
                    cout << "INF ";
                else
                    cout << adjMatrix[i][j] << " ";
            }
            cout << endl;
        }
    }

    void kruskalMST() {
        vector<Edge> mst;
        vector<int> parent(V);
        for (int i = 0; i < V; ++i) parent[i] = i;

        auto find = [&](int i) {
            while (i != parent[i])
                i = parent[i];
            return i;
        };

        auto unionSets = [&](int u, int v) {
            int rootU = find(u);
            int rootV = find(v);
            parent[rootU] = rootV;
        };

        sort(edges.begin(), edges.end(), [](Edge a, Edge b) {
            return a.weight < b.weight;
        });

        int mstWeight = 0;
        for (auto edge : edges) {
            if (find(edge.u) != find(edge.v)) {
                mst.push_back(edge);
                mstWeight += edge.weight;
                unionSets(edge.u, edge.v);
            }
        }

        cout << "\nKruskal's MST:\n";
        for (auto edge : mst) {
            cout << edge.u << " - " << edge.v << " : " << edge.weight << "\n";
        }
        cout << "Total Weight: " << mstWeight << "\n";
    }

    void primMST() {
        vector<bool> inMST(V, false);
        vector<int> key(V, INT_MAX);
        vector<int> parent(V, -1);
        key[0] = 0;

        for (int i = 0; i < V - 1; ++i) {
            int u = -1;
            for (int j = 0; j < V; ++j) {
                if (!inMST[j] && (u == -1 || key[j] < key[u]))
                    u = j;
            }

            inMST[u] = true;

            for (int v = 0; v < V; ++v) {
                if (adjMatrix[u][v] != INT_MAX && !inMST[v] && adjMatrix[u][v] < key[v]) {
                    key[v] = adjMatrix[u][v];
                    parent[v] = u;
                }
            }
        }

        cout << "\nPrim's MST:\n";
        int mstWeight = 0;
        for (int i = 1; i < V; ++i) {
            cout << parent[i] << " - " << i << " : " << adjMatrix[parent[i]][i] << "\n";
            mstWeight += adjMatrix[parent[i]][i];
        }
        cout << "Total Weight: " << mstWeight << "\n";
    }
};

int main() {
    int V = 5; // Number of departments/institutes
    Graph g(V);

    g.addEdge(0, 1, 10);
    g.addEdge(0, 2, 20);
    g.addEdge(1, 2, 30);
    g.addEdge(1, 3, 25);
    g.addEdge(2, 3, 15);
    g.addEdge(3, 4, 10);
    g.addEdge(2, 4, 5);

    g.displayAdjMatrix();
    g.kruskalMST();
    g.primMST();

    return 0;
}
