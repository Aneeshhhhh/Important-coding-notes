#include <iostream>
#include <string>
#include <cmath>
#include <cctype>
#include <stack>
using namespace std;

// Node structure for linked list-based stack
struct Node {
    char data;
    Node* next;
};

// Stack class using singly linked list
class Stack {
private:
    Node* top; // Points to the top element of the stack
public:
    Stack() {
        top = nullptr; // Initialize an empty stack
    }

    // Push an element onto the stack
    void push(char val) {
        Node* newNode = new Node;
        newNode->data = val;
        newNode->next = top;
        top = newNode;
    }

    // Pop an element from the stack
    char pop() {
        if (top == nullptr) {
            cout << "Stack underflow" << endl;
            return -1;
        }
        char val = top->data;
        Node* temp = top;
        top = top->next;
        delete temp;
        return val;
    }

    // Peek the top element of the stack
    char peek() {
        if (top != nullptr) {
            return top->data;
        }
        cout << "Stack is empty" << endl;
        return -1;
    }

    // Check if the stack is empty
    bool isEmpty() {
        return top == nullptr;
    }
};

// Function to check if a character is an operator
bool isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}

// Function to get precedence of an operator
int precedence(char op) {
    if (op == '+' || op == '-') {
        return 1;
    } else if (op == '*' || op == '/') {
        return 2;
    }
    return 0;
}

// Function to convert infix expression to postfix
string infixToPostfix(const string& infix) {
    Stack stack;
    string postfix = "";

    for (char c : infix) {
        if (isalnum(c)) { // If operand, append to postfix
            postfix += c;
        } else if (c == '(') { // If left parenthesis, push to stack
            stack.push(c);
        } else if (c == ')') { // If right parenthesis, pop until '('
            while (!stack.isEmpty() && stack.peek() != '(') {
                postfix += stack.pop();
            }
            stack.pop(); // Discard '('
        } else if (isOperator(c)) { // If operator, pop operators with higher precedence
            while (!stack.isEmpty() && precedence(stack.peek()) >= precedence(c)) {
                postfix += stack.pop();
            }
            stack.push(c);
        }
    }

    // Pop all the remaining operators from the stack
    while (!stack.isEmpty()) {
        postfix += stack.pop();
    }

    return postfix;
}

// Function to convert infix expression to prefix
string infixToPrefix(const string& infix) {
    Stack stack;
    string prefix = "";
    string reversedInfix = "";

    // Reverse the infix expression
    for (int i = infix.length() - 1; i >= 0; i--) {
        if (infix[i] == '(') {
            reversedInfix += ')';
        } else if (infix[i] == ')') {
            reversedInfix += '(';
        } else {
            reversedInfix += infix[i];
        }
    }

    // Convert reversed infix to postfix (which is equivalent to prefix)
    string postfix = infixToPostfix(reversedInfix);
    
    // Reverse the postfix to get the prefix
    for (int i = postfix.length() - 1; i >= 0; i--) {
        prefix += postfix[i];
    }

    return prefix;
}

// Function to evaluate a postfix expression
int evaluatePostfix(const string& postfix) {
    Stack stack;
    for (char c : postfix) {
        if (isdigit(c)) {
            stack.push(c - '0'); // Push operand (converted to integer)
        } else if (isOperator(c)) {
            int operand2 = stack.pop();
            int operand1 = stack.pop();
            switch (c) {
                case '+': stack.push(operand1 + operand2); break;
                case '-': stack.push(operand1 - operand2); break;
                case '*': stack.push(operand1 * operand2); break;
                case '/': stack.push(operand1 / operand2); break;
            }
        }
    }
    return stack.pop(); // Final result
}

// Function to evaluate a prefix expression
int evaluatePrefix(const string& prefix) {
    Stack stack;
    for (int i = prefix.length() - 1; i >= 0; i--) {
        char c = prefix[i];
        if (isdigit(c)) {
            stack.push(c - '0'); // Push operand (converted to integer)
        } else if (isOperator(c)) {
            int operand1 = stack.pop();
            int operand2 = stack.pop();
            switch (c) {
                case '+': stack.push(operand1 + operand2); break;
                case '-': stack.push(operand1 - operand2); break;
                case '*': stack.push(operand1 * operand2); break;
                case '/': stack.push(operand1 / operand2); break;
            }
        }
    }
    return stack.pop(); // Final result
}

int main() {
    string infix = "(3+5)*2-(6/3)";
    
    // Conversion from Infix to Postfix
    string postfix = infixToPostfix(infix);
    cout << "Infix to Postfix: " << postfix << endl;

    // Conversion from Infix to Prefix
    string prefix = infixToPrefix(infix);
    cout << "Infix to Prefix: " << prefix << endl;

    // Evaluate Postfix
    int postfixResult = evaluatePostfix(postfix);
    cout << "Postfix Evaluation Result: " << postfixResult << endl;

    // Evaluate Prefix
    int prefixResult = evaluatePrefix(prefix);
    cout << "Prefix Evaluation Result: " << prefixResult << endl;

    return 0;
}
