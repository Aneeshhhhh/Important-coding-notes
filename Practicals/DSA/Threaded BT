#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
    bool isThreaded; // True if `right` is a thread

    Node(int val) {
        data = val;
        left = right = nullptr;
        isThreaded = false;
    }
};

class ThreadedBinaryTree {
private:
    Node* root;

    Node* leftMost(Node* node) {
        while (node && node->left) {
            node = node->left;
        }
        return node;
    }

public:
    ThreadedBinaryTree() {
        root = nullptr;
    }

    void insert(int value) {
        if (!root) {
            root = new Node(value);
            return;
        }

        Node* current = root;
        Node* parent = nullptr;

        while (current) {
            parent = current;
            if (value < current->data) {
                if (!current->left)
                    break;
                current = current->left;
            } else {
                if (!current->right || current->isThreaded)
                    break;
                current = current->right;
            }
        }

        Node* newNode = new Node(value);

        if (value < parent->data) {
            parent->left = newNode;
            newNode->right = parent;
            newNode->isThreaded = true;
        } else {
            if (parent->isThreaded) {
                newNode->right = parent->right;
                newNode->isThreaded = true;
            }
            parent->right = newNode;
            parent->isThreaded = false;
        }
    }

    void inOrder() {
        Node* current = leftMost(root);
        while (current) {
            cout << current->data << " ";
            if (current->isThreaded) {
                current = current->right;
            } else {
                current = leftMost(current->right);
            }
        }
        cout << endl;
    }

    void preOrder() {
        Node* current = root;
        while (current) {
            cout << current->data << " ";
            if (current->left) {
                current = current->left;
            } else if (!current->isThreaded) {
                current = current->right;
            } else {
                while (current && current->isThreaded) {
                    current = current->right;
                }
            }
        }
        cout << endl;
    }
};

int main() {
    ThreadedBinaryTree tbt;

    tbt.insert(20);
    tbt.insert(10);
    tbt.insert(30);
    tbt.insert(5);
    tbt.insert(15);
    tbt.insert(25);
    tbt.insert(35);

    cout << "In-order Traversal: ";
    tbt.inOrder();

    cout << "Pre-order Traversal: ";
    tbt.preOrder();

    return 0;
}
